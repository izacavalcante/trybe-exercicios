//1.Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.
//¬∞ Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function.
//¬∞ Modifique as concatena√ß√µes para template literals.

// function testingScope(escopo) {
//     if (escopo === true) {
//       var ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
//       ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
//       console.log(ifScope);
//     } else {
//       var elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
//       console.log(elseScope);
//     }
//     console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necess√°rio esta linha pode ser removida.
//   }

//   testingScope(false);

// const testingScope = (escopo) => (escopo === true) ? (`N√£o devo ser utilizada fora do meu escopo (if). 
// √ìtimo, fui utilizada no escopo!`) : (`N√£o devo ser utilizada fora meu escopo (else), o que estou fazendo aqui ? :O`)

// console.log(testingScope(true));

// 1.Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.
// ¬∞Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); 
// retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// ¬∞B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todoarray.sort(). 
// Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.


// const oddsAndEvens = [13, 3, 4, 10, 7, 2];

// // Seu c√≥digo aqui. 

// console.log(oddsAndEvens); // ser√° necess√°rio alterar essa linha üòâ

// const ordem = () => (.sort);

// console.log(ordem[13, 3, 4, 10, 7, 2]);

function ordem() {
    let array = [];
    for (let i of array) {
        return [i].sort();
    }
}
ordem([13, 3, 4, 10, 7, 2])